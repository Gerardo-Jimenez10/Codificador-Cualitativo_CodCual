import tkinter as tk
from tkinter import filedialog, messagebox, Menu, colorchooser, simpledialog
from tkinter import font
import textwrap
import nltk
import docx
import fitz
import pickle
import os


def cargar_contenido(ruta_archivo):
    if ruta_archivo.lower().endswith('.txt'):
        with open(ruta_archivo, 'r', encoding='utf-8') as archivo:
            contenido = archivo.read()
    elif ruta_archivo.lower().endswith('.docx'):
        doc = docx.Document(ruta_archivo)
        contenido = '\n'.join([paragraph.text for paragraph in doc.paragraphs])
    elif ruta_archivo.lower().endswith('.pdf'):
        pdf_doc = fitz.open(ruta_archivo)
        contenido = ''
        for page_num in range(pdf_doc.page_count):
            page = pdf_doc[page_num]
            contenido += page.get_text()
    else:
        raise ValueError(
            "Formato de archivo no compatible. Utilice archivos .txt, .docx o .pdf.")
    return contenido


class Tooltip:
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tooltip_window = None

    def show_tooltip(self, event, tag_name):
        # Obtener la posición actual del cursor
        x, y = event.x_root + 10, event.y_root + 10

        # Crear una ventana de tooltip
        self.tooltip_window = tk.Toplevel(self.widget)
        self.tooltip_window.wm_overrideredirect(True)
        self.tooltip_window.wm_geometry(f"+{x}+{y}")

        # Convertir el texto a mayúsculas antes de mostrarlo
        upper_text = self.text.upper()

        # Etiqueta para mostrar el texto
        label = tk.Label(
            self.tooltip_window,
            text=upper_text,
            justify='left',
            background='#FFFF66',
            relief='solid',
            borderwidth=1,
            font=("arial", 9, "bold", "italic")
        )
        label.pack(ipadx=5, ipady=2)

        # Cambiar el cursor
        self.widget.config(cursor="circle")

    def hide_tooltip(self, _):
        # Ocultar la ventana de tooltip
        if self.tooltip_window:
            self.tooltip_window.destroy()
            self.tooltip_window = None

        # Cambiar el cursor a su forma normal
        self.widget.config(cursor="")

    def update_position(self, event):
        if self.tooltip_window:
            x = event.x_root + 10
            y = event.y_root + 10

            self.tooltip_window.geometry(f"+{x}+{y}")


class EtiquetadoApp:
    def __init__(self, raiz):
        super().__init__()
        self.raiz = raiz
        self.raiz.title('"Codificador Cualitativo"')
        self.raiz.configure(bg="green")
        self.raiz.state("zoomed")

        # Variables
        self.palabras_clave_var = tk.StringVar()
        self.etiqueta_var = tk.StringVar()

        # Diccionario para almacenar los tags y sus colores correspondientes
        self.archivos_abiertos = {}
        self.tooltips_asignados = {}
        self.color_tooltips = {}
        self.ruta = None
        self.contenido = None

        # ------------------MENU-------------------------------------------
        self.barraMenu = Menu(self.raiz)
        self.raiz.configure(menu=self.barraMenu, width=300, height=300)

        # -------Opciones del menú desplegable: "Archivo"-------------------
        self.menu_desplegable = Menu(self.barraMenu, tearoff=0)
        self.menu_desplegable.add_command(label="*Importar Archivo", font=(
            "arial", 10, "bold"), foreground="red", command=self.importar_archivo)
        self.menu_desplegable.add_separator()
        self.menu_desplegable.add_command(label="*Guardar Codificado", font=(
            "arial", 10, "bold"), foreground="brown", command=self.guardar_codificado)
        self.menu_desplegable.add_separator()
        self.menu_desplegable.add_command(label="*Salir", font=(
            "arial", 10, "bold"), foreground="Green", command=self.salir_programa)

        # -------Opciones del menú desplegable: "Edición"-------------------
        self.edicionMenu = Menu(self.barraMenu, tearoff=0)
        self.edicionMenu.add_command(label="*Limpiar Citas del Código", font=(
            "arial", 10, "bold"), foreground="navy blue", command=self.limpiar_contenido)

        # -------Opciones del menú desplegable: "Información"-------------------
        self.menu_información = Menu(self.barraMenu, tearoff=0)
        self.menu_información.add_command(
            label="*Acerca de...", font=(
                "arial", 10, "bold"), foreground="purple", command=self.mostrar_informacion)

        # Crear menú desplegable para la navegación entre archivos
        self.menu_archivos_abiertos = Menu(self.barraMenu, tearoff=0)

        # -------Encabezados del Menu--------------------------------------
        self.barraMenu.add_cascade(label="Archivo", menu=self.menu_desplegable)
        self.barraMenu.add_cascade(label="Edición", menu=self.edicionMenu)
        self.barraMenu.add_cascade(
            label="Historial", menu=self.menu_archivos_abiertos)
        self.barraMenu.add_cascade(
            label="Información", menu=self.menu_información)

        tk.Label(raiz, text="CodCual", font=("Magneto", 32, "bold"),
                 fg="yellow", bg="green").grid(row=0, column=2, padx=(20, 20), pady=(8, 40))

        # Etiqueta para mostrar el nombre del archivo actual
        tk.Label(raiz, text="Texto", font=("arial", 12, "bold"), bg="#99FF00").grid(
            row=4, column=2, columnspan=2, pady=(8, 0), padx=(8, 0), sticky='ew')

        # "Widget" Text para Mostrar el Contenido Original
        self.texto_original = tk.Text(raiz, wrap=tk.WORD, width=77, height=23, font=(
            "Arial", 12))  # Tamaño de la fuente
        self.texto_original.grid(row=5, column=2, padx=(
            8, 0), pady=(0, 8), sticky='nsew')

        # "Barra" de Desplazamiento del Widget Text
        scrollVertical1 = tk.Scrollbar(raiz, command=self.texto_original.yview)
        scrollVertical1.grid(row=5, column=3, pady=(0, 8), sticky="nsew")
        self.texto_original.config(yscrollcommand=scrollVertical1.set)

        tk.Label(raiz, text="Citas del Código", font=("arial", 12, "bold"), bg="#FF93F2").grid(
            row=4, column=4, columnspan=2, pady=(8, 0), padx=(8, 8), sticky='ew')

        # "Widget" Text para Mostrar los Fragmentos Etiquetados
        self.texto_etiquetado = tk.Text(
            raiz, wrap=tk.WORD, width=32, height=23, font=("Arial", 12))
        self.texto_etiquetado.grid(row=5, column=4, padx=(
            8, 0), pady=(0, 8), sticky='nsew')
        self.texto_etiquetado.configure(bg="#FFFFCC")

        # "Barra" de Desplazamiento del los Fragmentos Etiquetados
        scrollVertical2 = tk.Scrollbar(
            raiz, command=self.texto_etiquetado.yview)
        scrollVertical2.grid(row=5, column=5, pady=(0, 8),
                             padx=(0, 8), sticky="nsew")
        self.texto_etiquetado.config(yscrollcommand=scrollVertical2.set)

        tk.Label(raiz, text="Lista de Codificaciones Realizadas", font=("arial", 12, "bold"), bg="cyan").grid(
            row=4, column=0, columnspan=2, padx=(8, 0), pady=(8, 0), sticky='ew')

        # "Widget" Text para Mostrar la "Lista" de Fragmentos Etiquetados
        self.lista_etiquetado = tk.Text(
            raiz, wrap=tk.WORD, width=25, height=24)
        self.lista_etiquetado.grid(row=5, column=0, pady=(
            0, 8), padx=(8, 0), sticky='nsew')
        self.lista_etiquetado.configure(bg="#FFFFCC")

        # "Barra" de Desplazamiento del Widget Mostrar la Lista de Fragmentos
        scrollVertical3 = tk.Scrollbar(
            raiz, command=self.lista_etiquetado.yview)
        scrollVertical3.grid(row=5, column=1, pady=(0, 8),
                             padx=0, sticky="nsew")
        self.lista_etiquetado.config(yscrollcommand=scrollVertical3.set)

        # Configurar el escalado de las filas y columnas para que los cuadros y barras de desplazamiento estén alineados
        raiz.grid_rowconfigure(5, weight=1)
        raiz.grid_columnconfigure(2, weight=1)
        raiz.grid_columnconfigure(4, weight=1)
        raiz.grid_columnconfigure(0, weight=1)

        # Inicializar Parámetros
        self.ruta = None
        self.contenido = None
        self.tokens = None
        self.sentencias = None
        self.etiqueta_actual = None
        self.parrafos_etiquetados = []
        self.indices_etiquetados = []
        self.etiquetas_asignadas = []

        # Actualizar la lista de etiquetas asignadas
        self.actualizar_lista_etiquetado()

        # Intentar cargar datos previos al iniciar la aplicación
        try:
            with open("datos_codificacion.pkl", "rb") as archivo_datos:
                datos_guardados = pickle.load(archivo_datos)

            # Restaurar datos de etiquetas y contenido
            self.ruta = datos_guardados.get("ruta", None)
            self.contenido = datos_guardados.get("contenido", None)
            self.tokens = datos_guardados.get("tokens", None)
            self.sentencias = datos_guardados.get("sentencias", None)
            self.etiqueta_actual = datos_guardados.get("etiqueta_actual", None)
            self.parrafos_etiquetados = datos_guardados.get(
                "parrafos_etiquetados", [])
            self.indices_etiquetados = datos_guardados.get(
                "indices_etiquetados", [])
            self.etiquetas_asignadas = datos_guardados.get(
                "etiquetas_asignadas", [])

            # Restaurar el contenido original en la interfaz
            self.mostrar_contenido_original()
            self.actualizar_lista_etiquetado()

            # Restaurar subrayados
            subrayados = datos_guardados.get("subrayados", [])
            for subrayado in subrayados:
                tag_name = subrayado['tag']
                start = subrayado['start']
                end = subrayado['end']
                color = subrayado['color']
                etiqueta = subrayado['etiqueta']

                # Restaurar el subrayado
                self.texto_original.tag_add(tag_name, start, end)
                self.texto_original.tag_configure(
                    tag_name, underline=True, font=("Arial", 11, "bold"), foreground=color)

                # Restaurar el tooltip asociado
                tooltip = Tooltip(self.texto_original, etiqueta)
                self.texto_original.tag_bind(
                    tag_name, "<Enter>", lambda event, tooltip=tooltip, tag_name=tag_name: tooltip.show_tooltip(event, tag_name))
                self.texto_original.tag_bind(
                    tag_name, "<Leave>", tooltip.hide_tooltip)
                self.texto_original.tag_bind(
                    tag_name, "<Motion>", tooltip.update_position)

        except FileNotFoundError:
            # En caso de que el archivo no exista, no hacer nada
            pass

        # Asociar la función cambiar_cursor_segun_posicion al evento de movimiento del ratón
        self.texto_original.bind(
            "<Motion>", self.cambiar_cursor_segun_posicion)

        # Opción "Etiquetar" en un clic
        self.menu_contextual_texto_original = Menu(
            self.texto_original, tearoff=0)
        self.menu_contextual_texto_original.add_command(label="*Codificar*", font=(
            "arial", 11, "bold"), foreground="purple", command=self.etiquetar_fragmento)
        self.menu_contextual_texto_original.add_separator()
        # Opción "Quitar" justo debajo de "Codificar"
        self.menu_contextual_texto_original.add_command(label="*Remover*", font=(
            "arial", 11, "bold"), foreground="red", command=self.quitar_subrayado)
        self.texto_original.bind(
            "<Button-3>", self.mostrar_menu_contextual_texto_original)

    def mostrar_informacion(self):
        messagebox.showinfo("Acerca de...",
                            "     Aplicación desarrollada con lenguaje Python.\n\n"
                            '                  "Codificador Cualitativo"\n\n'
                            "                     Derechos reservados®\n\n"
                            '         "GERARDO HERNÁNDEZ JIMÉNEZ"\n\n'
                            "  Egresado de la Licenciatura en Informática.\n\n"
                            "        Centro Universitario UAEM Texcoco.\n\n"
                            "Universidad Autónoma del Estado de México.")

    def mostrar_menu_contextual_texto_original(self, event):
        self.menu_contextual_texto_original.post(event.x_root, event.y_root)

    def agregar_archivo_abierto(self, nombre_archivo, contenido):
        if nombre_archivo not in self.archivos_abiertos:
            self.archivos_abiertos[nombre_archivo] = contenido
            self.menu_archivos_abiertos.add_command(
                label=nombre_archivo, command=lambda nombre=nombre_archivo: self.cambiar_archivo(nombre))

    def cambiar_archivo(self, nombre_archivo):
        # Cambiar al archivo seleccionado
        if nombre_archivo in self.archivos_abiertos:
            self.contenido = self.archivos_abiertos[nombre_archivo]
            self.tokens = nltk.sent_tokenize(self.contenido)
            self.sentencias = nltk.sent_tokenize(self.contenido)
            self.mostrar_contenido_original()

    def importar_archivo(self):
        self.ruta = filedialog.askopenfilename(title="Importar Archivo", filetypes=[
                                               ("Todos los archivos", "*.*")])
        if self.ruta:
            self.contenido = cargar_contenido(self.ruta)
            self.tokens = nltk.sent_tokenize(self.contenido)
            self.sentencias = nltk.sent_tokenize(self.contenido)
            self.mostrar_contenido_original()

            # Agregar el archivo a la lista de archivos abiertos
            nombre_archivo = os.path.basename(self.ruta)
            self.agregar_archivo_abierto(nombre_archivo, self.contenido)

    def restaurar_cursor(self, event):
        event.widget.config(cursor="")

    def cambiar_cursor_segun_posicion(self, event):
        # Obtener la posición actual del cursor
        x, y = event.x, event.y

        # Obtener las tags en la posición actual
        tags = self.texto_original.tag_names("@{},{}".format(x, y))

        # Verificar si hay tags de subrayado en la posición actual
        if any(tag.startswith("Color_") for tag in tags):
            self.texto_original.config(cursor="circle")
        else:
            self.texto_original.config(cursor="xterm")

    def etiquetar_fragmento(self):
        # Solicitar el código de la etiqueta
        etiqueta = simpledialog.askstring("Codificar", "Escribe un Código:")
        if etiqueta:
            color_subrayado = self.elegir_color_subrayado()

            # Verificar si el color ya tiene un tooltip asociado
            if color_subrayado in self.color_tooltips:
                # Si ya hay un tooltip asociado a este color, reutilizar la etiqueta
                etiqueta = self.color_tooltips[color_subrayado]
            else:
                # Si el color es nuevo, asignar el nuevo tooltip al color
                self.color_tooltips[color_subrayado] = etiqueta

            # Restablecer la etiqueta actual
            self.etiqueta_actual = etiqueta

            # Agregar la etiqueta al widget Text
            self.texto_etiquetado.insert(
                tk.END, f'>>>({etiqueta})<<<\n', "negrita")
            self.texto_etiquetado.tag_configure(
                "negrita", font=("Arial", 12, "bold"))

            # Aplicar subrayado al fragmento seleccionado
            tag_name = self.aplicar_subrayado(color_subrayado)

            # Crear el tooltip asociado al subrayado (reutilizar si ya existe)
            if etiqueta in self.tooltips_asignados:
                tooltip = self.tooltips_asignados[etiqueta]
            else:
                tooltip = Tooltip(self.texto_original, etiqueta)
                self.tooltips_asignados[etiqueta] = tooltip

            # Vincular eventos al tag
            self.texto_original.tag_bind(tag_name, "<Enter>", lambda event, tooltip=tooltip,
                                         tag_name=tag_name: tooltip.show_tooltip(event, tag_name))
            self.texto_original.tag_bind(
                tag_name, "<Leave>", tooltip.hide_tooltip)
            self.texto_original.tag_bind(
                tag_name, "<Motion>", tooltip.update_position)

            # Guardar la etiqueta y el tooltip asignado para futuras referencias
            self.etiquetas_asignadas.append((etiqueta, tag_name))

            # Guardar la información del subrayado en el archivo
            self.guardar_subrayados()

            # Agregar información de la etiqueta a la lista
            self.etiquetas_asignadas.append((self.etiqueta_actual, tag_name))

            palabras_clave = self.palabras_clave_var.get().split(',')
            inicio_seleccion = self.texto_original.index(tk.SEL_FIRST)
            fin_seleccion = self.texto_original.index(tk.SEL_LAST)
            seleccion = self.texto_original.get(
                inicio_seleccion, fin_seleccion)

            nuevos_parrafos_etiquetados = self.buscar_y_etiquetar_parrafos(
                palabras_clave, etiqueta, [seleccion])

            self.indices_etiquetados.extend(
                parrafo[0] for parrafo in nuevos_parrafos_etiquetados)
            self.parrafos_etiquetados.extend(nuevos_parrafos_etiquetados)
            self.mostrar_fragmento_etiquetado(
                color_subrayado, nuevos_parrafos_etiquetados)
            self.actualizar_lista_etiquetado()
            self.guardar_etiquetado(nuevos_parrafos_etiquetados)
            return tag_name

    def elegir_color_subrayado(self):
        color_subrayado = colorchooser.askcolor()[1]
        if color_subrayado:
            return color_subrayado

    def quitar_subrayado(self):
        try:
            # Obtener el inicio y final de la selección
            sel_first = self.texto_original.index(tk.SEL_FIRST)
            sel_last = self.texto_original.index(tk.SEL_LAST)

            # Obtener todas las tags asociadas a la selección
            tags_en_seleccion = self.texto_original.tag_names(sel_first)

            # Filtrar solo los tags que tienen el prefijo 'Color_' (subrayados)
            tags_a_eliminar = [
                tag for tag in tags_en_seleccion if tag.startswith("Color_")]

            # Quitar cada tag de la selección
            for tag in tags_a_eliminar:
                # Quitar el subrayado en el rango seleccionado
                self.texto_original.tag_remove(tag, sel_first, sel_last)

                # Desvincular los eventos de tooltip asociados a este tag
                self.texto_original.tag_unbind(tag, "<Enter>")
                self.texto_original.tag_unbind(tag, "<Leave>")
                self.texto_original.tag_unbind(tag, "<Motion>")

            # Opcional: mensaje de confirmación
            messagebox.showinfo(
                "Subrayado Eliminado", "Se ha eliminado el subrayado del texto seleccionado.")
        except tk.TclError:
            messagebox.showwarning(
                "Advertencia", "Debe seleccionar un texto subrayado para eliminar.")

    def buscar_y_etiquetar_parrafos(self, palabras_clave, etiqueta, sentencias):
        parrafos_etiquetados = []

        for i, sentencia in enumerate(sentencias):
            if any(palabra.lower() in sentencia.lower() for palabra in palabras_clave):
                parrafos_etiquetados.append((i, sentencia, etiqueta))

        return parrafos_etiquetados

    def mostrar_contenido_original(self):
        contenido_mostrar = '\n'.join(self.tokens)
        self.texto_original.delete(1.0, tk.END)
        # Crear una fuente en negritas
        bold_font = font.Font(self.texto_original,
                              self.texto_original.cget("font"))
        bold_font.configure(weight="bold")
        # Dividir el contenido por saltos de línea
        lineas = contenido_mostrar.split('\n')
        # Iterar sobre cada línea y agregar el número de línea
        for i, linea in enumerate(lineas, start=1):
            # Agregar el número de línea en negritas seguido de la línea original
            # \u2043 es el caracter de bala en Unicode
            contenido_linea_numerada = f"{i}\u2043 {linea}\n\n"
            # Insertar el número de línea en negritas
            self.texto_original.insert(tk.END, f"{i}\u2043 ", ("bold",))
            # Insertar la línea original
            self.texto_original.insert(tk.END, f"{linea}\n\n")
        # Configurar la etiqueta "bold" para usar la fuente en negritas
        self.texto_original.tag_configure("bold", font=bold_font)

    def mostrar_fragmento_etiquetado(self, color_subrayado, nuevos_parrafos_etiquetados):
        # Obtener la etiqueta asignada al último fragmento etiquetado
        ultima_etiqueta = self.etiquetas_asignadas[-1][0] if self.etiquetas_asignadas else None

        for i, sentencia, etiqueta in nuevos_parrafos_etiquetados:
            wrapped_sentence = textwrap.fill(sentencia, width=40)
            texto_etiquetado = f"\n{wrapped_sentence}\n\n\n"

            # Aplicar subrayado con el mismo color de texto
            self.aplicar_subrayado(color_subrayado)

            if etiqueta != ultima_etiqueta:
                # Si la etiqueta no es la misma que la última, inserta normalmente
                self.texto_etiquetado.insert(tk.END, texto_etiquetado)
            else:
                # Si la etiqueta es la misma que la última, inserta debajo de la última etiqueta
                self.texto_etiquetado.insert(tk.END, texto_etiquetado)

    def resaltar_etiqueta(self, tag_name):
        # Limpiar resaltado previo
        self.texto_original.tag_remove("resaltado", 1.0, tk.END)

        # Verificar si la lista de etiquetas asignadas no está vacía
        if self.etiquetas_asignadas and len(self.etiquetas_asignadas) > 0:
            # Obtener la etiqueta asociada al tag_name
            etiqueta_resaltada = None
            for etiqueta, tag in self.etiquetas_asignadas:
                if tag == tag_name:
                    etiqueta_resaltada = etiqueta
                    break

            if etiqueta_resaltada:
                # Resaltar fragmentos con la misma etiqueta
                for i, (_, _, etiqueta) in enumerate(self.parrafos_etiquetados, start=1):
                    if etiqueta == etiqueta_resaltada and i > 0:  # Verificar que i sea mayor que 0
                        # Obtener el tag_name correspondiente a la etiqueta
                        tag_name = self.etiquetas_asignadas[i - 1][1]
                        self.texto_original.tag_add(
                            "resaltado", f"{tag_name}.first", f"{tag_name}.last")

                # Desplazar la vista al primer fragmento resaltado
                self.texto_original.see("resaltado.first")

    def recuperar_fragmento_codificado(self, tag_name):
        # Obtener la etiqueta asociada al botón
        etiqueta_resaltada = None
        for etiqueta, tag in self.etiquetas_asignadas:
            if tag == tag_name:
                etiqueta_resaltada = etiqueta
                break

        if etiqueta_resaltada:
            # Buscar los fragmentos codificados con la etiqueta correspondiente
            fragmentos_por_etiqueta = {}  # Diccionario para almacenar fragmentos por etiqueta
            for indice, sentencia, etiqueta in self.parrafos_etiquetados:
                if etiqueta == etiqueta_resaltada:
                    # Agregar el fragmento al diccionario
                    if etiqueta_resaltada not in fragmentos_por_etiqueta:
                        fragmentos_por_etiqueta[etiqueta_resaltada] = []
                    fragmentos_por_etiqueta[etiqueta_resaltada].append(
                        sentencia)

            # Insertar los fragmentos codificados en el widget de texto etiquetado
            for etiqueta, fragmentos in fragmentos_por_etiqueta.items():
                # Imprimir la etiqueta solo una vez
                self.texto_etiquetado.insert(
                    tk.END, f"\n>>>({etiqueta})<<<\n\n", "negrita")
                # Imprimir los fragmentos correspondientes
                for fragmento in fragmentos:
                    self.texto_etiquetado.insert(tk.END, fragmento + "\n\n")
            # Configurar la etiqueta "negrita" para que el texto esté en negrita
            self.texto_etiquetado.tag_configure(
                "negrita", font=("Arial", 12, "bold"))

    def restaurar_subrayado(self, tag_name):
        # Obtener la etiqueta asociada al botón
        etiqueta_resaltada = None
        for etiqueta, tag in self.etiquetas_asignadas:
            if tag == tag_name:
                etiqueta_resaltada = etiqueta
                break

        # Restaurar el subrayado y el color correspondiente en el texto original
        for indice, sentencia, etiqueta in self.parrafos_etiquetados:
            if etiqueta == etiqueta_resaltada:
                # Obtener el tag_name correspondiente al fragmento codificado
                tag_name = self.etiquetas_asignadas[self.parrafos_etiquetados.index(
                    (indice, sentencia, etiqueta))][1]
                # Restaurar el subrayado y el color
                color = tag_name.split('_')[-1]
                self.texto_original.tag_add(
                    tag_name, f"{indice}.0", f"{indice + len(sentencia)}.0")
                self.texto_original.tag_configure(
                    tag_name, underline=True, underlinefg=color, foreground=color, font=("Arial", 11, "bold"))

    def actualizar_lista_etiquetado(self):
        # Limpiar la lista de etiquetas
        self.lista_etiquetado.delete(1.0, tk.END)

        # Crear un conjunto para almacenar las etiquetas únicas
        etiquetas_unicas = set()

        # Mostrar las etiquetas asignadas en la lista
        for i, (etiqueta, tag_name) in enumerate(self.etiquetas_asignadas, start=1):
            # Verificar si la etiqueta ya está presente en el conjunto de etiquetas únicas
            if etiqueta not in etiquetas_unicas:
                # Agregar la etiqueta al conjunto de etiquetas únicas
                etiquetas_unicas.add(etiqueta)

                # Agregar dos saltos de línea antes del botón y el contador
                self.lista_etiquetado.insert(tk.END, '\n\n')

                # Crear un contador para la etiqueta actual
                contador = sum(
                    1 for _, _, etiq in self.parrafos_etiquetados if etiq == etiqueta)

                # Botón relleno con el color del fragmento codificado (resalta la etiqueta)
                btn_color = tk.Button(self.lista_etiquetado, text="  ", bg=tag_name.split(
                    '_')[-1], relief="groove", borderwidth=2, command=lambda t=tag_name: self.resaltar_etiqueta(t))
                btn_color.grid(row=i, column=1, padx=(6, 10), pady=(7, 7))

                # Enlace a los eventos para cambiar el cursor al pasar sobre el botón de color
                btn_color.bind("<Enter>", lambda event,
                               btn=btn_color: btn.config(cursor="hand2"))
                btn_color.bind("<Leave>", lambda event,
                               btn=btn_color: btn.config(cursor=""))

                # Agregar un contador del número de fragmentos etiquetados
                label_contador = tk.Label(self.lista_etiquetado, text=f"{[contador]}", font=(
                    "Arial", 10, "bold"), fg="purple", bg="#FFFFCC")
                label_contador.grid(row=i, column=0, padx=(2, 0), pady=(
                    7, 7), sticky="w")  # Agregar al lado del botón

                # Botón de Etiqueta
                btn_resaltar = tk.Button(self.lista_etiquetado, text=f"{etiqueta}", command=lambda t=tag_name: self.recuperar_fragmento_codificado(
                    t), justify=tk.LEFT, font=("arial", 10, "bold"))
                # Agregar al lado del botón de color
                btn_resaltar.grid(row=i, column=2, pady=(7, 7), sticky="w")

                # Agregar eventos para cambiar el cursor al pasar sobre el botón de resaltado
                btn_resaltar.bind("<Enter>", lambda event,
                                  btn=btn_resaltar: btn.config(cursor="hand2"))
                btn_resaltar.bind("<Leave>", lambda event,
                                  btn=btn_resaltar: btn.config(cursor=""))

                # Menú contextual para el botón
                menu_contextual = tk.Menu(btn_resaltar, tearoff=0)
                menu_contextual.add_command(label="Eliminar Código", font=(
                    "arial", 10, "bold"), foreground="red", command=lambda b=btn_resaltar,
                    c=btn_color, l=label_contador, e=etiqueta: self.eliminar_etiqueta(b, c, l, e))
                # Separador
                menu_contextual.add_separator()
                menu_contextual.add_command(
                    label="Anexar a otro Código", font=(
                        "arial", 10, "bold"), foreground="navy blue", command=lambda b=btn_resaltar, e=etiqueta: self.asignar_etiqueta(b, e))

                # Asociar clic derecho al menú contextual
                btn_resaltar.bind(
                    "<Button-3>", lambda event, menu=menu_contextual: menu.post(event.x_root, event.y_root))

        # Agregar un salto de línea al final
        self.lista_etiquetado.insert(tk.END, '\n\n')

    def eliminar_etiqueta(self, boton_resaltar, boton_color, label_contador, etiqueta):
        # Obtener el color del subrayado del botón
        color_subrayado = boton_color.cget("bg")

        # Buscar el tag asociado con el color del subrayado
        tag_name = f"Color_{color_subrayado}"

        # Remover el subrayado en todo el documento para el tag correspondiente
        self.texto_original.tag_remove(tag_name, '1.0', tk.END)

        # Desvincular solo si existían los eventos asociados
        if etiqueta in self.tooltips_asignados:
            del self.tooltips_asignados[etiqueta]
        if color_subrayado in self.color_tooltips:
            del self.color_tooltips[color_subrayado]

        # Desvincular los eventos del subrayado si el tag existe
        self.texto_original.tag_unbind(tag_name, "<Enter>")
        self.texto_original.tag_unbind(tag_name, "<Leave>")
        self.texto_original.tag_unbind(tag_name, "<Motion>")

        # Destruir los widgets de la interfaz para eliminarlos completamente
        boton_resaltar.destroy()  # Elimina el botón que resalta la etiqueta
        boton_color.destroy()      # Elimina el botón de color asociado
        label_contador.destroy()    # Elimina el label del contador

        # Eliminar la etiqueta y el tag de las asignaciones de forma eficiente
        self.etiquetas_asignadas = [
            et for et in self.etiquetas_asignadas if et[0] != etiqueta]

        # Eliminar los fragmentos asociados a la etiqueta de manera eficiente
        self.parrafos_etiquetados = [
            parrafo for parrafo in self.parrafos_etiquetados if parrafo[2] != etiqueta]

        # Actualizar la lista de etiquetas de manera rápida
        self.actualizar_lista_etiquetado()

    def asignar_etiqueta(self, boton, etiqueta_actual):
        nuevo_nombre = simpledialog.askstring(
            "Anexar", f"Nombre del código a Anexar:")
        if nuevo_nombre:
            if nuevo_nombre in [et[0] for et in self.etiquetas_asignadas]:
                self.combinar_etiquetas(etiqueta_actual, nuevo_nombre)
                self.actualizar_lista_etiquetado()

    def combinar_etiquetas(self, etiqueta_origen, etiqueta_destino):
        # Combinar fragmentos de ambas etiquetas
        fragmentos_origen = [
            parrafo for parrafo in self.parrafos_etiquetados if parrafo[2] == etiqueta_origen]

        # Unir los fragmentos del origen al destino SIN modificar el origen
        self.parrafos_etiquetados.extend(
            [(ini, fin, etiqueta_destino) for ini, fin, _ in fragmentos_origen])

        # Actualizar las etiquetas asignadas
        # Si se comenta este fragmento se conservara el texto origen, pero tardara en eliminarse.
        self.etiquetas_asignadas = [
            (etiqueta_destino if etiq == etiqueta_origen else etiq, tag)
            for etiq, tag in self.etiquetas_asignadas.copy()
        ]
        # Actualiza la lista de fragmentos etiquetados para reflejar el cambio en la interfaz
        self.actualizar_lista_etiquetado()

    def aplicar_subrayado(self, color_subrayado):
        sel_first = self.texto_original.index(tk.SEL_FIRST)
        sel_last = self.texto_original.index(tk.SEL_LAST)

        # Crear un nuevo tag para el subrayado si no existe
        tag_name = f"Color_{color_subrayado}"
        self.texto_original.tag_configure(tag_name, underline=True, font=(
            "Arial", 11, "bold"), foreground=color_subrayado)

        # Aplicar el subrayado al rango seleccionado
        self.texto_original.tag_add(tag_name, sel_first, sel_last)

        return tag_name

    def limpiar_contenido(self):
        self.texto_etiquetado.delete(1.0, tk.END)

        messagebox.showinfo(
            "Removido", "Las citas del código se han removido.")

    def guardar_subrayados(self):
        subrayados = []

        for tag in self.texto_original.tag_names():
            if tag.startswith("Color_"):
                ranges = self.texto_original.tag_ranges(tag)
                for start, end in zip(ranges[0::2], ranges[1::2]):
                    etiqueta = None
                    for etiq, t in self.etiquetas_asignadas:
                        if t == tag:
                            etiqueta = etiq
                            break
                    subrayados.append({
                        'tag': tag,
                        'color': tag.split('_')[-1],
                        'start': self.texto_original.index(start),
                        'end': self.texto_original.index(end),
                        'etiqueta': etiqueta
                    })

    def restaurar_subrayados(self):
        try:
            for subrayado in subrayado:
                tag_name = subrayado['tag']
                start = subrayado['start']
                end = subrayado['end']
                color = subrayado['color']
                etiqueta = subrayado['etiqueta']

                # Restaurar el subrayado
                self.texto_original.tag_add(tag_name, start, end)
                self.texto_original.tag_configure(
                    tag_name, underline=True, font=("Arial", 11, "bold"), foreground=color)

                # Restaurar el tooltip
                tooltip = Tooltip(self.texto_original, etiqueta)
                self.texto_original.tag_bind(tag_name, "<Enter>", lambda event, tooltip=tooltip,
                                             tag_name=tag_name: tooltip.show_tooltip(event, tag_name))
                self.texto_original.tag_bind(
                    tag_name, "<Leave>", tooltip.hide_tooltip)
                self.texto_original.tag_bind(
                    tag_name, "<Motion>", tooltip.update_position)

        except FileNotFoundError:
            pass

    def guardar_etiquetado(self, nuevos_parrafos_etiquetados):
        ruta_guardado = filedialog.asksaveasfilename(
            defaultextension=".txt", filetypes=[("Archivos de Texto", "*.txt")])

        if ruta_guardado:
            with open(ruta_guardado, 'w', encoding='utf-8') as archivo_guardado:
                contenido_guardar = ''

                for _, sentencia, etiqueta in nuevos_parrafos_etiquetados:
                    # Utilizar el nombre de la etiqueta del fragmento actual
                    contenido_guardar += f">>>({self.etiqueta_actual})<<<\n\n{textwrap.fill(sentencia, width=40)}\n\n"

                archivo_guardado.write(contenido_guardar)

            messagebox.showinfo(
                "Guardado", "El fragmento codificado se ha guardado correctamente.")

    def guardar_codificado(self):
        contenido_editado = self.texto_etiquetado.get(1.0, tk.END)
        ruta_guardado = filedialog.asksaveasfilename(
            defaultextension=".txt", filetypes=[("Archivos de Texto", "*.txt")])

        # Guardar subrayados
        self.guardar_subrayados()

        if ruta_guardado:
            with open(ruta_guardado, 'w', encoding='utf-8') as archivo_guardado:
                archivo_guardado.write(contenido_editado)

            messagebox.showinfo(
                "Guardado", "El fragmento codificado se ha guardado correctamente.")

    def salir_programa(self):
        # Guardar los datos de las etiquetas y contenido del archivo
        datos_a_guardar = {
            "ruta": self.ruta,
            "contenido": self.contenido,
            "tokens": self.tokens,
            "sentencias": self.sentencias,
            "etiqueta_actual": self.etiqueta_actual,
            "parrafos_etiquetados": self.parrafos_etiquetados,
            "indices_etiquetados": self.indices_etiquetados,
            "etiquetas_asignadas": self.etiquetas_asignadas,
        }

        # Guardar los subrayados asociados a las etiquetas
        subrayados = []
        for tag in self.texto_original.tag_names():
            if tag.startswith("Color_"):
                ranges = self.texto_original.tag_ranges(tag)
                for start, end in zip(ranges[0::2], ranges[1::2]):
                    etiqueta = None
                    for etiq, t in self.etiquetas_asignadas:
                        if t == tag:
                            etiqueta = etiq
                            break
                    subrayados.append({
                        'tag': tag,
                        'color': tag.split('_')[-1],
                        'start': self.texto_original.index(start),
                        'end': self.texto_original.index(end),
                        'etiqueta': etiqueta
                    })

        # Combina los datos etiquetados y los subrayados en un solo diccionario
        datos_a_guardar["subrayados"] = subrayados

        # Guarda todo en un solo archivo .pkl
        with open("datos_codificacion.pkl", "wb") as archivo:
            pickle.dump(datos_a_guardar, archivo)

        # Cerrar la aplicación
        self.raiz.destroy()


# Ventana principal de la aplicación
raiz = tk.Tk()
raiz.geometry("1500x700")  # Establecer el tamaño de la ventana (ancho x alto)
app = EtiquetadoApp(raiz)
raiz.mainloop()
